import numpy as np
# Lookup tables from SWMM reference manual (Table C-1)
# Circular section properties as function of relative depth (Y/Yfull)
# TODO: riight now this is from chatgpt, create own tables to make sure these are accurate
DEPTH_RATIOS = np.array([
    0.00, 0.02, 0.04, 0.06, 0.08, 0.10, 0.12, 0.14, 0.16, 0.18,
    0.20, 0.22, 0.24, 0.26, 0.28, 0.30, 0.32, 0.34, 0.36, 0.38,
    0.40, 0.42, 0.44, 0.46, 0.48, 0.50, 0.52, 0.54, 0.56, 0.58,
    0.60, 0.62, 0.64, 0.66, 0.68, 0.70, 0.72, 0.74, 0.76, 0.78,
    0.80, 0.82, 0.84, 0.86, 0.88, 0.90, 0.92, 0.94, 0.96, 0.98, 1.00
])

AREA_RATIOS = np.array([
    0.00000, 0.00471, 0.01340, 0.02446, 0.03740, 0.05208, 0.06800, 0.08505,
    0.10330, 0.12236, 0.14230, 0.16310, 0.18450, 0.20665, 0.22920, 0.25236,
    0.27590, 0.29985, 0.32420, 0.34874, 0.37360, 0.39878, 0.42370, 0.44907,
    0.47450, 0.50000, 0.52550, 0.55093, 0.57630, 0.60135, 0.62640, 0.65126,
    0.67580, 0.70015, 0.72410, 0.74764, 0.77080, 0.79335, 0.81540, 0.83690,
    0.85760, 0.87764, 0.89670, 0.91495, 0.93200, 0.94792, 0.96260, 0.97555,
    0.98660, 0.99516, 1.00000
])

HYDRAULIC_RADIUS_RATIOS = np.array([
    0.01000, 0.05280, 0.10480, 0.15560, 0.20520, 0.25400, 0.30160, 0.34840,
    0.39440, 0.43880, 0.48240, 0.52480, 0.56640, 0.60640, 0.64560, 0.68360,
    0.72040, 0.75640, 0.79120, 0.82440, 0.85680, 0.88800, 0.91760, 0.94640,
    0.97360, 1.00000, 1.02400, 1.04800, 1.07000, 1.09120, 1.11000, 1.12720,
    1.14400, 1.15960, 1.17400, 1.18480, 1.19400, 1.20240, 1.21000, 1.21480,
    1.21700, 1.21720, 1.21500, 1.21040, 1.20300, 1.19200, 1.17800, 1.15840,
    1.13200, 1.09400, 1.00000
])

# Table C-2: Area to depth relationship (for inverse lookup)
AREA_RATIOS_INV = np.array([
    0.00, 0.02, 0.04, 0.06, 0.08, 0.10, 0.12, 0.14, 0.16, 0.18,
    0.20, 0.22, 0.24, 0.26, 0.28, 0.30, 0.32, 0.34, 0.36, 0.38,
    0.40, 0.42, 0.44, 0.46, 0.48, 0.50, 0.52, 0.54, 0.56, 0.58,
    0.60, 0.62, 0.64, 0.66, 0.68, 0.70, 0.72, 0.74, 0.76, 0.78,
    0.80, 0.82, 0.84, 0.86, 0.88, 0.90, 0.92, 0.94, 0.96, 0.98, 1.00
])

DEPTH_FROM_AREA = np.array([
    0.0000, 0.05236, 0.08369, 0.11025, 0.13423, 0.15643, 0.17755, 0.19772,
    0.21704, 0.23581, 0.25412, 0.27194, 0.28948, 0.30653, 0.32349, 0.34017,
    0.35666, 0.37298, 0.38915, 0.40521, 0.42117, 0.43704, 0.45284, 0.46858,
    0.48430, 0.50000, 0.51572, 0.53146, 0.54723, 0.56305, 0.57892, 0.59487,
    0.61093, 0.62710, 0.64342, 0.65991, 0.67659, 0.69350, 0.71068, 0.72816,
    0.74602, 0.76424, 0.78297, 0.80235, 0.82240, 0.84353, 0.86563, 0.88970,
    0.91444, 0.94749, 1.0000
])


def lookup_area_ratio(depth_ratio):
    """Interpolate area ratio from depth ratio using lookup table."""
    return np.interp(depth_ratio, DEPTH_RATIOS, AREA_RATIOS)


def lookup_hydraulic_radius_ratio(depth_ratio):
    """Interpolate hydraulic radius ratio from depth ratio using lookup table."""
    return np.interp(depth_ratio, DEPTH_RATIOS, HYDRAULIC_RADIUS_RATIOS)


def lookup_depth_ratio(area_ratio):
    """Interpolate depth ratio from area ratio using inverse lookup table."""
    return np.interp(area_ratio, AREA_RATIOS_INV, DEPTH_FROM_AREA)
